-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Object.Film exposing (..)

import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The title of this film.
-}
title : SelectionSet (Maybe String) Api.Object.Film
title =
    Object.selectionForField "(Maybe String)" "title" [] (Decode.string |> Decode.nullable)


{-| The episode number of this film.
-}
episodeID : SelectionSet (Maybe Int) Api.Object.Film
episodeID =
    Object.selectionForField "(Maybe Int)" "episodeID" [] (Decode.int |> Decode.nullable)


{-| The opening paragraphs at the beginning of this film.
-}
openingCrawl : SelectionSet (Maybe String) Api.Object.Film
openingCrawl =
    Object.selectionForField "(Maybe String)" "openingCrawl" [] (Decode.string |> Decode.nullable)


{-| The name of the director of this film.
-}
director : SelectionSet (Maybe String) Api.Object.Film
director =
    Object.selectionForField "(Maybe String)" "director" [] (Decode.string |> Decode.nullable)


{-| The name(s) of the producer(s) of this film.
-}
producers : SelectionSet (Maybe (List (Maybe String))) Api.Object.Film
producers =
    Object.selectionForField "(Maybe (List (Maybe String)))" "producers" [] (Decode.string |> Decode.nullable |> Decode.list |> Decode.nullable)


{-| The ISO 8601 date format of film release at original creator country.
-}
releaseDate : SelectionSet (Maybe String) Api.Object.Film
releaseDate =
    Object.selectionForField "(Maybe String)" "releaseDate" [] (Decode.string |> Decode.nullable)


type alias SpeciesConnectionOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


speciesConnection :
    (SpeciesConnectionOptionalArguments -> SpeciesConnectionOptionalArguments)
    -> SelectionSet decodesTo Api.Object.FilmSpeciesConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Film
speciesConnection fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "speciesConnection" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias StarshipConnectionOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


starshipConnection :
    (StarshipConnectionOptionalArguments -> StarshipConnectionOptionalArguments)
    -> SelectionSet decodesTo Api.Object.FilmStarshipsConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Film
starshipConnection fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "starshipConnection" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias VehicleConnectionOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


vehicleConnection :
    (VehicleConnectionOptionalArguments -> VehicleConnectionOptionalArguments)
    -> SelectionSet decodesTo Api.Object.FilmVehiclesConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Film
vehicleConnection fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "vehicleConnection" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias CharacterConnectionOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


characterConnection :
    (CharacterConnectionOptionalArguments -> CharacterConnectionOptionalArguments)
    -> SelectionSet decodesTo Api.Object.FilmCharactersConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Film
characterConnection fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "characterConnection" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias PlanetConnectionOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


planetConnection :
    (PlanetConnectionOptionalArguments -> PlanetConnectionOptionalArguments)
    -> SelectionSet decodesTo Api.Object.FilmPlanetsConnection
    -> SelectionSet (Maybe decodesTo) Api.Object.Film
planetConnection fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "planetConnection" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| The ISO 8601 date format of the time that this resource was created.
-}
created : SelectionSet (Maybe String) Api.Object.Film
created =
    Object.selectionForField "(Maybe String)" "created" [] (Decode.string |> Decode.nullable)


{-| The ISO 8601 date format of the time that this resource was edited.
-}
edited : SelectionSet (Maybe String) Api.Object.Film
edited =
    Object.selectionForField "(Maybe String)" "edited" [] (Decode.string |> Decode.nullable)


{-| The ID of an object
-}
id : SelectionSet Api.ScalarCodecs.Id Api.Object.Film
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapCodecs |> .codecId |> .decoder)
